#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>


//int main()
//{
//	//int array[] = { 1,2,3,4,5,6,7,8,9 };
//	//int num = 5;
//	//for (int i = 0; i < 9; ++i)
//	//{
//	//	if (i == 5)
//	//	{
//	//		printf("%d\n", i);
//	//	}
//	//}
//	int array[] = { 1,2,3,4,5,6,7,8,9 };
//	int num = 7;
//	int left = 0, rigth = 8;  //下标
//	while (left < rigth)
//	{
//		int mid = (rigth + left) / 2;  //中间数的下标
//		if (array[mid] == num)
//		{
//			printf("%d\n", array[mid]);
//			break;
//		}
//		else if (array[mid] > num)
//		{
//			rigth = mid;
//		}
//		else
//		{
//			left = mid;
//		}
//	}
//	return 0;
//}
#include<string.h>
#include<time.h>
#include<windows.h>

//5. 编写代码实现，模拟用户登录情景，并且只能登录三次。（只允许输入三次密码，如果密码正确则
//提示登录成，如果三次均输入错误，则退出程序  
//int Mystrcmp(char* a, char* b)
//{
//	while (*a != '\0' && *b != '\0')
//	{
//		if (*a != *b)
//			return 0;
//		++a;
//		++b;
//	}
//	return 1;
//}
//int main()
//{
//	char* passwd = "123456";
//	char str[10];
//	for (int i = 0; i < 3; ++i)
//	{
//		scanf("%s",&str);
//		if (strcmp(passwd,str)  == 0)
//		{
//			printf("登录成功");
//			break;
//		}
//		else
//		{
//			printf("登录失败");
//
//		}
//	}
//}

//void fun1(int a, int b) 
//{
//	fun1(a,b);
//}
//
//int main()
//{
//	//strlen();
//	//strcmp();
//	//strcpy();
//	//memcpy();
//	//memmove();
//	//malloc() realloc() alloc()..... 
//	//fun();
//	int a = 0, b = 10;
//	fun1(a, b);
//
//	return 0;
//}
#include<string.h>
//
//int main()
//{
//	/*char* str = "hello world";
//	char ptr[20];
//	strcpy(ptr, str);
//	printf("%s\n", ptr);*/
//	int array[] = { 1,2,3,4,5,6,7,8,9,10 };
//
//	memset(array, 0, 10 * sizeof(int));
//	for (int i = 0; i < 10; ++i)
//	{
//		printf("%d\n", array[i]);
//	}
//}

//写一个函数可以找出两个整数中的最大值。
//int GetMaxNum(int a, int b)
//{
//	if (a > b)
//	{
//		return a;
//	}
//	else if (a < b)
//	{
//		return b;
//	}
//	else
//	{
//		return 0;
//	}
//}
//void Swap1(int x, int y) //10 20  // a 和 b形参
//{
//	int temp = 0;
//	temp = x;   //temp = 10;
//	x = y;      // a = 20;
//	y = temp;   // b = 10
//}
////写一个函数可以交换两个整形变量的内容
//void Swap2(int *x, int *y) //10 20  // a 和 b形参
//{
//	int temp = 0;
//	temp = *x;   //temp = 10;
//	*x = *y;      // a = 20;
//	*y = temp;   // b = 10
//	printf("x = %p, y = %p\n", x, y);
//}
//int main()
//{
//	/*int a = 10, b = 20;
//	int ret = GetMaxNum(a, b);
//	printf("%d\n", ret);
//	return 0;*/
//	int a = 10, b = 20;
//	Swap1(a, b);   //a 和 b是实参
//	Swap2(&a, &b);   //a 和 b是实参
//	//printf("a = %d,b = %d", a, b);
//	printf("a = %p, b = %p\n", &a, &b);
//}

//1. 写一个函数可以判断一个数是不是素数。
//int IsJustNum(int num)  //49  2 - 48 
//{
//	if (num == 2)
//	{
//		return 1;
//	}
//	for (int i = 3; i < num; ++i) 
//	{
//		if (num % i == 0)
//		{
//			return 0;
//		}
//	}
//	return 1;
//}
//
//int GetNum(int num)   //100
//{
//	int count = 0;
//	for (int i = 2; i <= num; ++i)
//	{
//		for (int j = 2; j < i; ++j)
//		{
//			if (i % j == 0)
//			{
//				continue;
//			}
//			else
//			{
//				++count;
//			}
//		}
//	}
//	return count;
//}
////2. 写一个函数判断一年是不是闰年。
//int IsYear(int year)
//{
//	if ((year % 100 != 0) && (year % 4 == 0) || (year % 400 == 0))
//	{
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//}
//3. 写一个函数，实现一个整形有序数组的二分查找。
//4. 写一个函数，每调用一次这个函数，就会将num的值增加1。

//int fun()
//{
//	return 1;
//}
//int GetAddNum()
//{
//	int count = 0;
//	for (int i = 0; i < 100; ++i)
//	{
//		if (fun())
//		{
//			++count;
//		}
//	}
//}


//接受一个整型值（无符号），按照顺序打印它的每一位
//1234567  1 2 3 4 5 6 7

//int num = 1234567;
//
//void PrintNum(int num)
//{
//	int array[7] = { 0 };
//	int i = 0;
//	while (num != 0)
//	{
//		array[i] = num % 10;
//		num = num / 10;
//		++i;
//	}
//	
//	for (int i = 6; i >= 0; --i)
//	{
//		printf("%d ", array[i]);
//	}
//
//}
//
//int main()
//{
//	int num = 1234567;
//	PrintNum(num);
//	return 0;
//}
//#define count 10
//int main()
//{
//	//int array[10] = { 0 };
//	//const int count = 10;
//	//int array[count] = { 0 };
//	/*int array[10] = { 1,2,3,4 };
//	int array[] = { 1,2,3,4,5 };
//	char array[] = { '1','b','c' };*/
//	/*char array[12] = "hello world";
//	char str[10] = { 'h','e','l'};
//	printf("%s  %s", array, str);*/
//	/*int array[10] = { 0 };
//	int size = sizeof(array) / sizeof(int);*/
//
//	char str[] = "hello world\0";
//	printf("%d %d", strlen(str), sizeof(str));
//}

//32 4字节
//64 8字节


//int main()
//{
//	int arr[10] = { 0 };
//	int i = 0;
//	for (i = 0; i < sizeof(arr) / sizeof(arr[0]); ++i)
//	{
//		printf("&arr[%d] = %p\n", i, &arr[i]);
//	}
//	return 0;
//}

//int main()
//{
//	//int array[3][4] = { {1,2,3,4},{5,6,7,8},{9,10,11,12} };
//	//int array[3][] = { {1,2},{3,4},{5,6} };
//	// 1  2  0  0
//	// 3  4  0  0
//	// 5  6  0  0
//	int array[3][4] = { 1,2,3,4 };
//
//	printf("%d\n", array[2][1]);
//
//	for (int i = 0; i < 3; ++i)
//	{
//		for (int j = 0; j < 4; ++j)
//		{
//			printf("%d ", array[i][j]);
//		}
//		printf("\n");
//	}
//}

//int main()
//{
//	int arr[3][4] = { 0 };
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			arr[i][j] = i * 4 + j;
//		}
//	}
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			printf("%d ", arr[i][j]);
//		}
//	}
//	return 0;
//}

//int main()
//{
//	int arr[3][4];
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//			int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			printf("&arr[%d][%d] = %p\n", i, j, &arr[i][j]);
//		}
//	}
//	return 0;
//}
//int main()
//{
//	int array[10] = { 0 };
//	//array[10] = 1;
//}

//int main()
//{
//    int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//    int i = 0;
//    for (i = 0; i <= 10; i++)
//    {
//        printf("%d\n", arr[i]);//当i等于10的时候，越界访问了
//    }
//    return 0;
//}
void Swap(int* a, int* b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}
void BlloubSort(int array[], int len)
{
	for (int i = 0; i < len; ++i)
	{
		for (int j = i + 1; j < len; ++j)
		{
			if (array[i] < array[j])
			{
				Swap(&array[i],&array[j]);
			}
		}
		//printf("%d ", array[i]);
		//printf("\n");
	}
}

void SlectSort(int array[], int len)
{
	int begin = 0;
	int end = len - 1;
	while (begin < end)
	{
		int max = begin;
		for (int i = begin; i <= end; ++i)
		{
			if (array[max] < array[i])
			{
				max = i;
			}
		}
		Swap(&array[begin], &array[max]);
		++begin;
	}
}


int main()
{
	int array[10] = { 2312,5,6,2332,12,7,0,3,1,2 };
	//BlloubSort(array, 10);
	SlectSort(array, 10);
	for (int i = 0; i < 10; ++i)
	{
		printf("%d ", array[i]);
	}
}
